/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RND_H
#define RND_H

#include "rnd_types.h"

/* Rnd service interface */
typedef struct _RndIf RndIf;  /* dummy object */

struct _RndIfInterface
{
  GTypeInterface parent;

  gboolean (*init_model) (RndIf *iface, gint8* _return, GError **error);
  gboolean (*veto) (RndIf *iface, gint8* _return, const gchar * seed, GError **error);
};
typedef struct _RndIfInterface RndIfInterface;

GType rnd_if_get_type (void);
#define TYPE_RND_IF (rnd_if_get_type())
#define RND_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RND_IF, RndIf))
#define IS_RND_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RND_IF))
#define RND_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_RND_IF, RndIfInterface))

gboolean rnd_if_init_model (RndIf *iface, gint8* _return, GError **error);
gboolean rnd_if_veto (RndIf *iface, gint8* _return, const gchar * seed, GError **error);

/* Rnd service client */
struct _RndClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _RndClient RndClient;

struct _RndClientClass
{
  GObjectClass parent;
};
typedef struct _RndClientClass RndClientClass;

GType rnd_client_get_type (void);
#define TYPE_RND_CLIENT (rnd_client_get_type())
#define RND_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_RND_CLIENT, RndClient))
#define RND_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_RND_CLIENT, RndClientClass))
#define RND_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_RND_CLIENT))
#define RND_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_RND_CLIENT))
#define RND_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_RND_CLIENT, RndClientClass))

gboolean rnd_client_init_model (RndIf * iface, gint8* _return, GError ** error);
gboolean rnd_client_send_init_model (RndIf * iface, GError ** error);
gboolean rnd_client_recv_init_model (RndIf * iface, gint8* _return, GError ** error);
gboolean rnd_client_veto (RndIf * iface, gint8* _return, const gchar * seed, GError ** error);
gboolean rnd_client_send_veto (RndIf * iface, const gchar * seed, GError ** error);
gboolean rnd_client_recv_veto (RndIf * iface, gint8* _return, GError ** error);
void rnd_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void rnd_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

#endif /* RND_H */
